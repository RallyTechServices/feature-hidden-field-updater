<!DOCTYPE html>
<html>
<head>
    <title>Feature Hidden Field Updater</title>
    <!--  (c) 2015 Rally Software Development Corp.  All Rights Reserved. -->
    <!--  Build Date: Sun Nov 29 2015 15:14:42 GMT-0700 (MST) -->
    
    <script type="text/javascript">
        var APP_BUILD_DATE = "Sun Nov 29 2015 15:14:42 GMT-0700 (MST)";
        var CHECKSUM = 122001159030;
    </script>
    
    <script type="text/javascript" src="/apps/2.0/sdk.js"></script>

    <script type="text/javascript">
        Rally.onReady(function() {
             
/**
 * A link that pops up a version dialog box
 */

Ext.define('Rally.technicalservices.InfoLink',{
    extend: 'Rally.ui.dialog.Dialog',
    alias: 'widget.tsinfolink',
    
    /**
     * @cfg {String} informationHtml
     * Additional text to be displayed on the popup dialog (for exmaple,
     * to add a description of the app's use or functionality)
     */
    informationHtml: null,
    
    /**
     * 
     * cfg {String} title
     * The title for the dialog box
     */
    title: "Build Information",
    
    defaults: { padding: 5, margin: 5 },

    closable: true,
     
    draggable: true,

    autoShow: true,
   
    width: 350, 
    
    initComponent: function() {
        var id = Ext.id(this);
        this.title =  "<span class='icon-help'> </span>" + this.title;
        this.callParent(arguments);
    },
    
    _generateChecksum: function(string){
        var chk = 0x12345678,
            i;
        string = string.replace(/var CHECKSUM = .*;/,"");
        string = string.replace(/\s/g,"");  //Remove all whitespace from the string.
        
        for (i = 0; i < string.length; i++) {
            chk += (string.charCodeAt(i) * i);
        }
    
        return chk;
    },
    
    _checkChecksum: function(container) {
        var deferred = Ext.create('Deft.Deferred');
        console.log("_checkChecksum", container);
        var me = this;
        
        Ext.Ajax.request({
            url: document.URL,
            params: {
                id: 1
            },
            success: function (response) {
                text = response.responseText;
                if ( CHECKSUM ) {
                    if ( CHECKSUM !== me._generateChecksum(text) ) {
                        console.log("Checksums don't match!");
                        deferred.resolve(false);
                        return;
                    }
                }
                deferred.resolve(true);
            }
        });
        
        return deferred.promise;
    },
    
    afterRender: function() {
        var app = Rally.getApp();
        
        if (! app.isExternal() ) {
                
            this._checkChecksum(app).then({
                scope: this,
                success: function(result){
                    if ( !result ) {
                        this.addDocked({
                            xtype:'container',
                            cls: 'build-info',
                            padding: 2,
                            html:'<span class="icon-warning"> </span>Checksums do not match'
                        });
                    }
                },
                failure: function(msg){
                    console.log("oops:",msg);
                }
            });
        } else {
            this.addDocked({
                xtype:'container',
                cls: 'build-info',
                padding: 2,
                html:'... Running externally'
            });
        }
        this.callParent(arguments);
    },
    
    beforeRender: function() {
        var me = this;
        this.callParent(arguments);

        if (this.informationHtml) {
            this.addDocked({
                xtype: 'component',
                componentCls: 'intro-panel',
                padding: 2,
                html: this.informationHtml
            });
        }
        
        this.addDocked({
            xtype:'container',
            cls: 'build-info',
            padding: 2,
            html:"This app was created by the Rally Technical Services Team."
        });
        
        if ( APP_BUILD_DATE ) {
            this.addDocked({
                xtype:'container',
                cls: 'build-info',
                padding: 2,
                html:'Build date/time: ' + APP_BUILD_DATE
            });
        }
    }
});

/*
 */
Ext.define('Rally.technicalservices.Logger',{
    constructor: function(config){
        Ext.apply(this,config);
    },
    log: function(args){
        var timestamp = "[ " + Ext.util.Format.date(new Date(), "Y-m-d H:i:s.u") + " ]";
        //var output_args = arguments;
        //output_args.unshift( [ "[ " + timestamp + " ]" ] );
        //output_args = Ext.Array.push(output_args,arguments);
        
        var output_args = [];
        output_args = Ext.Array.push(output_args,[timestamp]);
        output_args = Ext.Array.push(output_args, Ext.Array.slice(arguments,0));

        window.console && console.log.apply(console,output_args);
    }

});

Ext.define("feature-hidden-field-updater", {
    extend: 'Rally.app.App',
    componentCls: 'app',
    logger: new Rally.technicalservices.Logger(),
    defaults: { margin: 10 },
    config: {
        defaultSettings: {
            hiddenStartDateField: '',
            stateDateFields: {}
        }
    },
    items: [
        {xtype:'container',itemId:'selector_box', layout: {type: 'hbox'}},
        {xtype:'container',itemId:'display_box'}
    ],
    featureFetch: ['ObjectID','FormattedID','Name'],
    portfolioItemModelName: 'PortfolioItem/Feature',
    portfolioItemModel: null,
    portfolioItemStates: undefined,

    launch: function() {
        this._fetchLowestPortfolioItemModel().then({
            scope: this,
            success: function(modelName){
                this.portfolioItemModelName = modelName;
                Rally.data.ModelFactory.getModel({
                    type: modelName,
                    success: function(model) {
                        this.portfolioItemModel = model;
                        this._fetchStates(model).then({
                            success: function(states){
                                this.portfolioItemStates = states;
                                this._addReleaseSelector();
                            },
                            failure: function(msg){
                                Rally.ui.notify.Notifier.showError({message: "Failed to retrieve Portfolio Item States: " + msg});
                            },
                            scope: this

                        });
                    },
                    failure: function(){
                        Rally.ui.notify.Notifier.showError({message: "Failed to retrieve model: " + modelName});
                    },
                    scope: this
                });
            },
            failure: function(msg){
                Rally.ui.notify.Notifier.showError({message: "Failed to fetch Portfolio Item Types: " + msg});
            }
        });

    },
    _fetchStates: function(model){
        var deferred = Ext.create('Deft.Deferred');
        model.getField('State').getAllowedValueStore().load({
            callback: function(records, operation, success) {
                if (operation.wasSuccessful()){
                    deferred.resolve(records);
                } else {
                    deferred.reject(operation && operation.error && operation.error.errors.join(','));
                }
            }
        });
        return deferred;
    },
    _validateSettings: function(){
        this.logger.log('_validateSettings', this.getHiddenStartDateField(), this.getStateDateFieldMapping());

        if (Ext.Object.isEmpty(this.getStateDateFieldMapping()) && this.getHiddenStartDateField().length === 0){
            return false;
        }
        return true;
    },
    _addReleaseSelector: function(){

        if (!this._validateSettings()){
            this.down('#selector_box').add({
                xtype: 'container',
                html: "Please use the app settings to configure a Start Date field and/or State Field Mappings."
            });
            return;
        }

        this.down('#selector_box').removeAll();
        this.down('#selector_box').add({
            xtype: 'rallyreleasecombobox',
            fieldLabel: 'Release',
            labelAlign: 'right',
            width: 500,
            multiSelect: true,
            valueField: 'Name',
            listeners: {
                change: this._updateGrid,
                scope: this
            }
        });
    },
    _fetchLowestPortfolioItemModel: function(){
        var deferred = Ext.create('Deft.Deferred');

        Ext.create('Rally.data.wsapi.Store',{
            model: 'TypeDefinition',
            fetch: ['TypePath'],
            autoLoad: true,
            filters: [{
                property: 'TypePath',
                operator: 'contains',
                value: 'PortfolioItem/'
            },{
                property: 'Ordinal',
                value: 0
            }]
        }).load({
            callback: function(records, operation){
                if (operation.wasSuccessful()){
                    deferred.resolve(records[0].get('TypePath'));
                } else {
                    deferred.reject(operation.error.errors.join(','));
                }
            }
        });
        return deferred;
    },
    _getReleaseFilters: function(){
        var cb = this.down('rallyreleasecombobox');

        return Rally.data.wsapi.Filter.or(_.map(cb.getValue(), function(releaseName){ return {property: 'Release.Name', value: releaseName}; }));
    },
    _getFetchFields: function(){
        var fetchFields = Ext.Array.merge(this.featureFetch, this.selectedColumns || []);
        return fetchFields.concat([this.getHiddenStartDateField()]).concat(_.values(this.getStateDateFieldMapping()));
    },
    _updateGrid: function(){
        var cb = this.down('rallyreleasecombobox');
        this.logger.log('_updateGrid', cb.getValue(),_.values(this.getStateDateFieldMapping()));

        var filters = this._getReleaseFilters(),
            fields = this._getFetchFields();

        this.logger.log('fetch', fields);
        var store = Ext.create('Rally.data.wsapi.Store', {
            model: this.portfolioItemModelName,
            fetch: fields,
            filters: filters
        });
        this._createFeatureGrid(store);
    },
    getHiddenStartDateField: function(){
        return this.getSetting('hiddenStartDateField');
    },
    getStateDateFieldMapping: function(){
        var setting = this.getSetting('stateDateFields');
        if (Ext.isString(setting)){
            setting = Ext.JSON.decode(setting);
        }
        return setting || {};
    },
    getFieldDisplayName: function(f){
        return (this.portfolioItemModel.getField(f) && this.portfolioItemModel.getField(f).displayName) || f;
    },
    _getBulkConfigItems: function(){
        var items = [];

        if (this.getHiddenStartDateField()){
            items.push({
                xtype: 'rallyrecordmenuitembulksethiddendate' ,
                dateField: this.portfolioItemModel.getField(this.getHiddenStartDateField())
            });
        }

        if (!Ext.Object.isEmpty(this.getStateDateFieldMapping())){
            items.push({
                xtype: 'rallyrecordmenuitembulkupdatetransitiondates',
                stateDateFields: this.getStateDateFieldMapping(),
                states: this.portfolioItemStates
            });
        }
        return items;
    },
    _createFeatureGrid: function(store){
        this.down('#display_box').removeAll();

        var bulkConfigItems = this._getBulkConfigItems();

        this.down('#display_box').add({
            xtype: 'rallygrid',
            store: store,
            columnCfgs: this._getColumnCfgs(),
            enableBulkEdit: true,
            bulkEditConfig: {
                items: bulkConfigItems
            },
            listeners: {
                fieldsupdated: this._updateColumnCfgs,
                scope: this
            },
            plugins: [{
                ptype: 'tsgridfieldpicker',
                models: [this.portfolioItemModel],
                headerContainer: this.down('#selector_box'),
                context: this.getContext()
            },{
                ptype: 'tsgridcustomfiltercontrol',
                headerContainer: this.down('#selector_box'),
                modelNames: [this.portfolioItemModelName],
                permanentFilters: this._getReleaseFilters()
            }]
        });
    },
    _getHiddenFields: function(){
        var hiddenFields = [];

        if (this.getHiddenStartDateField()){
            hiddenFields.push(this.getHiddenStartDateField());
        }
        _.each(this.getStateDateFieldMapping(), function(field, state){
            hiddenFields.push(field);
        });
        return hiddenFields;
    },
    _updateColumnCfgs: function(newFields){
        this.selectedColumns = newFields;
        this._updateGrid();
    },
    _getColumnCfgs: function(){
        var cols = [],
            hiddenFields = this._getHiddenFields(),
            fields = this._getFetchFields();

         _.each(fields, function(f){
             if (f != 'ObjectID'){
                 var col = { dataIndex: f, text: this.getFieldDisplayName(f), align: 'left' };
                 if (Ext.Array.contains(hiddenFields, f)){
                     col.dataIndex = 'ObjectID';
                     col.renderer = function(v,m,r){
                         return Rally.util.DateTime.formatWithDefault(r.get(f));
                     }
                 }
                 cols.push(col);
             }
            }, this);
        return cols;

    },
    getSettingsFields: function(){
        return Rally.technicalservices.Settings.getFields(this.portfolioItemModelName, this.portfolioItemStates);
    },
    getOptions: function() {
        return [
            {
                text: 'About...',
                handler: this._launchInfo,
                scope: this
            }
        ];
    },
    _launchInfo: function() {
        if ( this.about_dialog ) { this.about_dialog.destroy(); }
        this.about_dialog = Ext.create('Rally.technicalservices.InfoLink',{});
    },
    
    isExternal: function(){
        return typeof(this.getAppId()) == 'undefined';
    },
    
    //onSettingsUpdate:  Override
    onSettingsUpdate: function (settings){
        this.logger.log('onSettingsUpdate',settings);
        Ext.apply(this, settings);
        this._addReleaseSelector();
    }
});

(function () {
    var Ext = window.Ext4 || window.Ext;

    /**
     * @private
     * Mixin to show or hide a control widget based on the toggle state of a GridBoard.
     */
    Ext.define('Rally.technicalservices.GridControlShowable', {
        /**
         * @cfg {String}
         * header position to add control to (left|right)
         */
        headerPosition: 'left',

        /**
         * Override to configure control component to add to GridBoard.
         *
         * @template
         * @return {Object|Ext.Component|false} return component config or component to add to control header or return false to add nothing.
         */
        getControlCmpConfig: function() {
            return false;
        },

        /**
         * Override to configure where the control component should be inserted in the control header
         *
         * @template
         * @return {Number|false} return insert position of control component or return false to add control in order.
         */
        getControlInsertPosition: function() {
            return false;
        },

        /**
         * Returns the control component;
         *
         * @returns {Ext.Component}
         */
        getControlCmp: function() {
            return this.controlCmp;
        },

        /**
         * Initializes and shows the control component in the header.
         */
        showControl: function() {
            if (!this.controlCmp) {
                this._createControlCmp();
            }

            if (this.controlCmp) {
                this.controlCmp.show();
            }

            return this.controlCmp;
        },

        _getControlCt: function() {
            return this.headerContainer;
        },

        _createControlCmp: function() {
            var controlCmpConfig = this.getControlCmpConfig();

            if (controlCmpConfig) {
                if (!Ext.isFunction(controlCmpConfig.hide)) {
                    controlCmpConfig.hidden = true;
                    controlCmpConfig.style = Ext.merge({'float': this.headerPosition}, controlCmpConfig.style);
                }

                if (this._getControlCt().down(controlCmpConfig.xtype)){
                    this._getControlCt().down(controlCmpConfig.xtype).destroy();
                }
                this.controlCmp = this._getControlCt().add(controlCmpConfig);

            }
        }
    });
})();
(function () {
    var Ext = window.Ext4 || window.Ext;

    /**
     * Adds a Rally.ui.filter.CustomFilterControl component to a Rally.ui.gridboard.GridBoard.
     *
     * A full example of using this plugin is available in the [Examples](#!/example/filterable-grid-board) section.
     */
    Ext.define('Rally.technicalservices.GridCustomFilterControl', {
        alias: 'plugin.tsgridcustomfiltercontrol',
        extend:'Ext.AbstractPlugin',
        mixins: ['Rally.technicalservices.GridControlShowable'],
        requires: [
            'Rally.ui.filter.view.CustomFilterButton',
            'Rally.data.wsapi.filter.FilterModificationator',
            'Rally.ui.filter.view.OwnerFilter',
            'Rally.data.ModelTypes'
        ],
        headerPosition: 'left',

        /**
         * @cfg {Object}
         * Config for Rally.ui.filter.view.CustomFilterButton.
         */
        filterControlConfig: {},

        /**
         * @cfg {Boolean}
         * Whether owner filter should apply to children items
         */
        filterChildren: true,

        /**
         * @cfg {Boolean}
         * Whether to show the additional owner quick filter
         */
        showOwnerFilter: false,

        /**
         * @cfg {Object}
         * Additional configuration passed to the owner filter
         */
        ownerFilterControlConfig: {},

        containerConfig: {},

        init: function(cmp) {
            this.callParent(arguments);
            this.cmp = cmp;
            this.cmp.useFilterCollection = false;

            var control = this.showControl();

            this.filterButton = control.down('rallycustomfilterbutton');
            this.ownerFilter = control.down('rallyusersearchcombobox');

            this._onTypeChange(cmp, this.modelNames);
        },

        getControlCmpConfig: function() {
            var config = Ext.merge({
                xtype: 'container',
                width: 72,
                layout: 'hbox',
                items: [
                    Ext.merge({
                        xtype: 'rallycustomfilterbutton',
                        context: this.context,
                        listeners: {
                            customfilter: {
                                fn: this._onFilterButtonStateAvailable,
                                single: true,
                                scope: this
                            }
                        },
                        toolTipConfig: {
                            html: 'Filter',
                            anchor: 'top',
                            mouseOffset: [-9, -2]
                        },
                        margin: '3 9 3 30'
                    }, this.filterControlConfig)
                ]
            }, this.containerConfig);

            if (this.showOwnerFilter) {
                config.width += 210;

                config.items.push(Ext.merge({
                    xtype: 'rallyownerfilter',
                    margin: '3px 10px 0px 0px',
                    listConfig: {
                        width: 200
                    },
                    context: this.context,
                    width: 200,
                    clearFilterText: '-- Clear Filter --',
                    listeners: {
                        initalvalueset: {
                            fn: this._onOwnerFilterStateAvailable,
                            single: true
                        },
                        select: this._applyFilter,
                        scope: this
                    }
                }, this.ownerFilterControlConfig));
            }

            return config;
        },

        _onFilterButtonStateAvailable: function() {
            this._filterButtonStateAvailable = true;
            this.filterButton.on('customfilter', this._applyFilter, this);
            if(!this.showOwnerFilter || this._ownerFilterStateAvailable) {
                this._applyFilter();
            }
        },

        _onOwnerFilterStateAvailable: function() {
            this._ownerFilterStateAvailable = true;
            if(this._filterButtonStateAvailable) {
                this._applyFilter();
            }
        },

        _onTypeChange: function(cmp, types) {
            var modelNames = _.map(types, function (type) {
                return type.isModel ? type.get('TypePath') : type;
            });
            var typeNames = this._getTypesByNames(modelNames);

            this.filterButton.setModelNames(modelNames);
            this.filterButton.setTypes(typeNames);
            this.filterButton.setFilters([]);
            this.filterButton.indicateNoActiveFilterPresent();
            this.filterButton.saveState();
        },

        _applyFilter: function() {

              var filters = _.compact(Ext.Array.merge(this.filterButton.getFilters(), this.ownerFilter && this.ownerFilter.getFilter())),
                modifiedFilters = Rally.data.wsapi.filter.FilterModificationator.modifyFilters(filters, this.filterChildren),
                filterArgs = {
                    types: this.filterButton.getTypes(),
                    filters: modifiedFilters
                };
            this._applyFilters(filterArgs);
        },
        _applyFilters: function(filterObj){

            var permanentFilters = this.permanentFilters || [];

            var extraFilters = filterObj.filters || [];

            this.cmp.store.clearFilter(true);
            var filters =  _.compact(Ext.Array.merge(
                        permanentFilters,
                        extraFilters));

            this.cmp.store.filter(filters);
        },
        _getTypesByNames: function(modelNames) {
            return _.map(modelNames, function (modelName) {
                return Rally.data.ModelTypes.getTypeByName(modelName).toLowerCase();
            }, this);
        }
    });
})();
(function () {
    var Ext = window.Ext4 || window.Ext;

    /**
     * Adds the FieldPicker component to a GridBoard.
     *
     * A full example of using this plugin is available in the [Examples](#!/example/customizable-columns-grid-board) section.
     */
    Ext.define('Rally.technicalservices.plugin.GridFieldPicker', {
        alias: 'plugin.tsgridfieldpicker',
        extend:'Ext.AbstractPlugin',
        mixins: ['Rally.technicalservices.GridControlShowable'],
        requires: [
            'Rally.ui.popover.Popover',
            'Rally.ui.Button',
            'Rally.ui.picker.FieldPicker'
        ],

        /**
         * @cfg {String[]} alwaysSelectedFields
         * The fields that will be always selected in the field picker for the grid view
         */
        gridAlwaysSelectedValues: ['FormattedID', 'Name'], // DragAndDropRank gets added in init if Drag and Drop is enabled for the workspace in the component's context

        /**
         * @cfg {String[]} gridFieldBlackList
         * The fields that will be blacklisted in grid mode
         */
        gridFieldBlackList: [
            'Actuals',
            'Changesets',
            'Children',
            'Description',
            'Notes',
            'ObjectID',
            'Predecessors',
            'RevisionHistory',
            'Subscription',
            'Successors',
            'TaskIndex',
            'Workspace',
            'VersionId'
        ],

         /**
         * @cfg {String[]}
         * the names of the models displayed on the board.
         */
        modelNames: [],

        stateful: true,

        margin: '3 9 0 0',

        constructor: function (config) {
            config.gridFieldBlackList = _.union(this.gridFieldBlackList, config.gridFieldBlackList);
            config.gridAlwaysSelectedValues = _.union(this.gridAlwaysSelectedValues, config.gridAlwaysSelectedValues);
            this.callParent(arguments);
        },

        init: function(cmp) {
            this.callParent(arguments);
            this.cmp = cmp;

            var rankingEnabled = false; //this.context.getWorkspace().WorkspaceConfiguration.DragDropRankingEnabled && cmp.gridConfig.enableRanking !== false;

            this.gridAlwaysSelectedValues = this._modifyFieldCollection(this.gridAlwaysSelectedValues, ['DragAndDropRank'], rankingEnabled);
            this.gridFieldBlackList = this._modifyFieldCollection(this.gridFieldBlackList, ['DragAndDropRank'], !rankingEnabled);
            this.stateId = this.stateId || this.context.getScopedStateId('shownfields');

            var state = Ext.state.Manager.get(this.stateId);
            this._fields = state && state.fields || this.boardFieldDefaults;

            this.showControl();
        },

        _modifyFieldCollection: function (collection, fields, include) {
            if (include) {
                return _.union(collection, fields);
            }
            return _.reject(collection, function (field) { return _.contains(fields, field); });
        },

        getControlCmpConfig: function() {
            return {
                xtype: "rallybutton",
                itemId: 'fieldpickerbtn',
                cls: 'field-picker-btn secondary rly-small',
                margin: this.margin,
                iconCls: 'icon-add-column',
                toolTipConfig: {
                    html: this.getTitle(),
                    anchor: 'top'
                },
                listeners: {
                    click: this._onClick,
                    scope: this
                }
            };
        },

        _onClick: function(btn) {
            this._createPopover(btn.getEl());
        },

        _getPickerConfig: function() {
            var pickerConfig = _.extend({
                value: _.pluck(this.cmp.columns, 'dataIndex').join(','),
                fieldBlackList: this.gridFieldBlackList,
                alwaysSelectedValues: this.gridAlwaysSelectedValues
            }, this.fieldPickerConfig);

            return pickerConfig;
        },

        _createPopover: function(popoverTarget) {
            this.popover = Ext.create('Rally.ui.popover.Popover', {
                target: popoverTarget,
                placement: ['bottom', 'left', 'top', 'right'],
                cls: 'field-picker-popover',
                toFront: Ext.emptyFn,
                buttonAlign: 'center',
                title: this.getTitle(),
                listeners: {
                    destroy: function () {
                        this.popover = null;
                    },
                    scope: this
                },
                buttons: [
                    {
                        xtype: "rallybutton",
                        text: 'Apply',
                        cls: 'field-picker-apply-btn primary rly-small',
                        listeners: {
                            click: function() {
                                this._onApply(this.popover);
                            },
                            scope: this
                        }
                    },
                    {
                        xtype: "rallybutton",
                        text: 'Cancel',
                        cls: 'field-picker-cancel-btn secondary dark rly-small',
                        listeners: {
                            click: function() {
                                this.popover.close();
                            },
                            scope: this
                        }
                    }
                ],
                items: [
                    _.extend({
                        xtype: 'rallyfieldpicker',
                        cls: 'field-picker',
                        itemId: 'fieldpicker',
                        modelTypes: this._getModelTypes(),
                        alwaysExpanded: true,
                        width: 200,
                        placeholderText: 'Search',
                        selectedTextLabel: 'Selected',
                        availableTextLabel: 'Available',
                        listeners: {
                            specialkey: function(field, e) {
                                if (e.getKey() === e.ESC) {
                                    this.popover.close();
                                }
                            },
                            scope: this
                        }
                    }, this._getPickerConfig())
                ]
            });
        },

        _getModelTypes: function() {
            var models = this._getModels();
            return _.pluck(models, 'typePath');
        },

        _getModels: function() {

            return _.reduce(this.models, function(accum, model) {
                if (model.typePath === 'artifact') {
                    accum = accum.concat(model.getArtifactComponentModels());
                } else {
                    accum.push(model);
                }
                return accum;
            }, []);
        },

        getTitle: function () {
            return 'Show Columns';
        },

        /**
         * Update the fields displayed. In grid mode this will be the columns displayed. In board mode it will be
         * the fields on the cards
         *
         * @param {String[]|Object[]} fields A list of field names to display
         * @param {Boolean} true to suspend store load if it will be triggered elsewhere
         */
        updateFields: function (fields, suspendLoad) {
            this._fields = fields;

            this.cmp.fireEvent('fieldsupdated', fields);
            this._updatePickerValue(fields);
        },

        _updatePickerValue: function(fields) {
            if (this.popover && this.popover.down('rallyfieldpicker')) {
                this.popover.down('rallyfieldpicker').setValue(this._fields.join(','));
            }
        },

        _onApply: function(popover) {
            var fieldPicker = popover.down('rallyfieldpicker'),
                fields = _.map(fieldPicker.getValue(), function (field) {
                    return field.get('name');
                });

            this.updateFields(fields);

            popover.close();
        }
    });
})();
(function() {
    var Ext = window.Ext4 || window.Ext;

    Ext.define('Rally.ui.combobox.HiddenDateFieldComboBox', {
        requires: [],
        extend: 'Rally.ui.combobox.FieldComboBox',
        alias: 'widget.tshiddendatefieldcombobox',

        _isNotHidden: function(field) {
            //We only want date field types that are writable and also we want to include hidden fields
            if (field && !field.readOnly && field.attributeDefinition &&
                field.attributeDefinition.AttributeType === 'DATE'){
                return true;
            }
            return false;

        }
    });
})();
Ext.define('Rally.ui.menu.bulk.UpdateTransitionDates', {
    alias: 'widget.rallyrecordmenuitembulkupdatetransitiondates',
    extend: 'Rally.ui.menu.bulk.MenuItem',
    requires: ['Rally.ui.notify.Notifier'],

    config: {
        text: 'Update Transition Dates',
        stateHash: {
            "Done": "c_Done"
        },
        handler: function() {
            this._onBulkUpdateClicked();
        }
    },

        predicate: function(records) {
            return _.every(records, function(record) {
                return record.self.isArtifact() || record.self.isTimebox();
            });
        },

        saveRecords: function(records) {

            if (records.length === 0){
                this._showMessage([],[],'');
                return;
            }

            var promises = _.map(records, function(record){
                return this._saveRecord(record);
            }, this);

            Deft.Promise.all(promises).then({
                scope: this,
                success: function(results){
                    var errorMessage = null,
                        successfulRecords = [];

                    _.each(results, function(r){
                        if (r.result){
                            successfulRecords.push(r);
                        } else {
                            errorMessage = r.errorMessage;
                        }
                        this._showMessage(records, successfulRecords, errorMessage);
                    }, this);
                }
            });
    },
    _saveRecord: function(record){
        var deferred = Ext.create('Deft.Deferred');

        record.save({
            callback: function(result, operation){
                if (operation.wasSuccessful()){
                    deferred.resolve({result: result, errorMessage: null});
                } else {
                    deferred.resolve({result: null, errorMessage: operation.error.errors.join(',')});
                }
            }
        });
        return deferred;
    },
    _showMessage: function(records, successfulRecords, errorMessage) {
        var me = this;

        var unsuccessfulRecords = _.difference(records, successfulRecords);
        if(successfulRecords.length) {
            me.onSuccess(successfulRecords, unsuccessfulRecords, errorMessage);
        } else {
            if (unsuccessfulRecords.length > 0){
                Rally.ui.notify.Notifier.showError({
                    message: errorMessage
                });
            } else {
                Rally.ui.notify.Notifier.showWarning({
                    message: "No state transition data was found or updated for the selected record(s)."
                });
            }
            Ext.callback(me.onActionComplete, null, [successfulRecords, unsuccessfulRecords]);
        }

    },
    _onBulkUpdateClicked: function() {
        if (this.onBeforeAction(this.records) === false) {
            return;
        }
        var me = this;
        this._fetchTransitionDates(this.records).then({
            success: function(updatedRecords){
                me.saveRecords(updatedRecords, me.records);
            }
        });
    },
    _fetchTransitionDates: function(records){
        var deferred = Ext.create('Deft.Deferred'),
            objectIds = _.map(records, function(r){ return r.get('ObjectID'); });

        Ext.create('Rally.data.lookback.SnapshotStore',{
            fetch: ['ObjectID','State','_ValidFrom','_ValidTo',"_PreviousValues.State"],
            find: {
                ObjectID: {$in: objectIds}
            },
            hydrate: ['State',"_PreviousValues.State"],
            removeUnauthorizedSnapshots: true,
            compress: true,
            limit: 'Infinity',
            //sorters: [{
            //    property: '_ValidFrom',
            //    direction: 'ASC'
            //}]
        }).load({
            callback: function(snapshots, operation){
                var snapsByOid = this.aggregateSnapsByOidForModel(snapshots);
                var updatedRecords = this._updateTransitionFields(records, snapsByOid);
                deferred.resolve(updatedRecords);
            },
            scope: this
        });

        return deferred;
    },
    _updateTransitionFields: function(records, snapsByOid){
        var stateHash = this.stateDateFields,
        states = _.map(this.states, function(s){ return s.get('StringValue')}),
            updatedRecords = [];

        _.each(records, function(r){
            var snaps = snapsByOid[r.get('ObjectID')] || [],
                currentState = r.get('State').Name,
                currentIdx = _.indexOf(states, currentState);

                _.each(stateHash, function(field, state){
                    if (_.indexOf(states, state) <= currentIdx){  //only populate if the current state is greater\equal to the state
                        _.each(snaps, function(snap){

                            if (snap.State === state && snap["_PreviousValues.State"]!== "" && snap["_PreviousValues.State"] !== state){
                                var transitionDate = snap._ValidFrom;
                                r.set(field, transitionDate);
                                updatedRecords.push(r);
                            }
                        });
                    }
                });
        });
        return updatedRecords;
    },
    aggregateSnapsByOidForModel: function(snaps){
        //Return a hash of objects (key=ObjectID) with all snapshots for the object
        var snaps_by_oid = {};
        Ext.each(snaps, function(snap){
            var oid = snap.ObjectID || snap.get('ObjectID');
            if (snaps_by_oid[oid] == undefined){
                snaps_by_oid[oid] = [];
            }
            snaps_by_oid[oid].push(snap.getData());

        });
        return snaps_by_oid;
    },
    /**
     * @override
     * @inheritdoc
     */
    onSuccess: function (successfulRecords, unsuccessfulRecords, errorMessage) {
        var me = this;
        var message = successfulRecords.length + (successfulRecords.length === 1 ? ' item has been updated.' : ' items have been updated.');

        if(successfulRecords.length === this.records.length) {
            Rally.ui.notify.Notifier.show({
                message: message + '.'
            });
        } else {
            Rally.ui.notify.Notifier.showWarning({
                message: message + ', but ' + unsuccessfulRecords.length + ' failed: ' + errorMessage
            });
        }
        Ext.callback(me.onActionComplete, null, [[], []]);
       // Ext.callback(me.onActionComplete, null, [successfulRecords, unsuccessfulRecords]);
    }
});

Ext.define('Rally.ui.menu.bulk.SetHiddenDate', {
    alias: 'widget.rallyrecordmenuitembulksethiddendate',
    extend: 'Rally.ui.menu.bulk.MenuItem',
    requires: ['Rally.ui.notify.Notifier'],

    config: {
        text: 'Set Planned Date...',
        handler: function() {
            this._onBulkSetHiddenDateClicked();
        },
        predicate: function(records) {
            return _.every(records, function(record) {
                return record.self.isArtifact() || record.self.isTimebox();
            });
        },

        saveRecords: function(records, args) {

            var promises = _.map(records, function(record){
                return this._saveRecord(record, args);
            }, this);

            Deft.Promise.all(promises).then({
                scope: this,
                success: function(results){
                    var successfulRecords = [],
                        unsuccessfulRecords = [],
                        errorMessage= '';

                    _.each(results, function(r){
                        if (r.successfulRecord){
                            successfulRecords.push(r.successfulRecord);
                        } else {
                            unsuccessfulRecords.push(r.unsuccessfulRecord);
                            errorMessage = r.operation && r.operation.error && r.operation.error.errors.join(',') || "Error updating record " + r.unsuccessfulRecord.get('FormattedID');
                        }

                    });
                    this.onSuccess(successfulRecords, unsuccessfulRecords, args, errorMessage);
                }
            });


        }
    },
    _saveRecord: function(record, args){
        var deferred = Ext.create('Deft.Deferred');

        record.set(args.field.name, args.value);

        record.save({
            callback: function(result, operation){
                if (operation.wasSuccessful()){
                    deferred.resolve({successfulRecord: record, unsuccessfulRecord: null});
                } else {
                    deferred.resolve({successfulRecord: null, unsuccessfulRecord: record, operation: operation});
                }
            }
        });
        return deferred;
    },
    _onBulkSetHiddenDateClicked: function() {
        Ext.create('Rally.technicalservices.dialog.SetDateDialog', {
            records: this.records,
            dateField: this.dateField,
            listeners: {
                edit: this._onEdit,
                scope: this
            }
        });
    },

    _onEdit: function(dialog, args) {
        if (this.onBeforeAction(this.records) === false) {
            return;
        }
        this.saveRecords(this.records, args);
    },

    /**
     * @override
     * @inheritdoc
     */
    onSuccess: function (successfulRecords, unsuccessfulRecords, args, errorMessage) {

        var message = successfulRecords.length + (successfulRecords.length === 1 ? ' item has' : ' items have');


            message += ' had ' + args.displayName;
            if (args.value === null || args.value === '') {
                message += ' removed';
            } else {
                message += ' changed to "' + (args.displayValue || args.value) + '"';
            }

        if(successfulRecords.length === this.records.length) {
            Rally.ui.notify.Notifier.show({
                message: message + '.'
            });
        } else {
            Rally.ui.notify.Notifier.showWarning({
                message: message + ', but ' + unsuccessfulRecords.length + ' failed: ' + errorMessage
            });
        }

        var changes = {};
        changes[args.field.name] = args.value;
        Ext.callback(this.onActionComplete, null, [successfulRecords, unsuccessfulRecords, changes]);
    }
});
(function() {
    var Ext = window.Ext4 || window.Ext;

    /**
     * The grid is a great way to fetch, sort and filter data on the client.
     * This example will shows a simple grid of stories.
     *
     *
     *      @example
     *      Ext.create('Ext.Container', {
     *          items: [{
     *              xtype: 'rallygrid',
     *              columnCfgs: [
     *                  'FormattedID',
     *                  'Name',
     *                  'Owner'
     *              ],
     *              storeConfig: {
     *                  model: 'userstory'
     *              }
     *          }],
     *          renderTo: Ext.getBody()
     *      });
     *
     * Additional grid examples can be found in the [Examples](#!/example) section.
     */
    Ext.define('Rally.ui.grid.Grid', {
        requires: [
            'Ext.selection.Model',
            'Ext.util.Sorter',
            'Ext.util.MixedCollection',
            'Rally.Message',
            'Rally.data.Ranker',
            'Rally.data.filter.FilterCollection',
            'Rally.data.util.Sorter',
            'Rally.data.wsapi.FieldFetchMapper',
            'Rally.ui.grid.GridView',
            'Rally.ui.grid.CheckboxModel',
            'Rally.ui.grid.ColumnBuilder',
            'Rally.ui.grid.PagingToolbar',
            'Rally.ui.grid.RankDragHandleColumn',
            'Rally.ui.grid.RowModel',
            'Rally.ui.grid.plugin.Validation',
            'Rally.ui.grid.plugin.CellValidationUi',
            'Rally.ui.grid.plugin.DragDrop',
            'Rally.ui.grid.plugin.CellEditing',
            'Rally.ui.grid.plugin.ObjectUpdateListener',
            'Rally.util.Animation',
            'Rally.ui.grid.plugin.BlockedReasonPopoverPlugin',
            'Rally.ui.grid.plugin.ColorPickerPlugin',
            'Rally.ui.grid.plugin.ClickHandlerPlugin'
        ],
        extend: 'Ext.grid.Panel',
        alias: 'widget.rallygrid',
        cls: 'rally-grid',

        mixins: {
            messageable: 'Rally.Messageable',
            dataStoreCreateable: 'Rally.data.DataStoreCreateable',
            clientMetrics: 'Rally.clientmetrics.ClientMetricsRecordable',
            stateful: 'Ext.state.Stateful',
            scopeable: 'Rally.app.Scopeable',
            filterable: 'Rally.data.filter.StoreFilterable'
        },

        clientMetrics: [
            {
                endEvent: 'viewready',
                description: 'initial load'
            },
            {
                event: 'filterchange',
                description: 'filter changed'
            },
            {
                beginEvent: 'filterchange',
                endEvent: 'load',
                description: 'grid reload due to filter'
            },
            {
                event: 'select',
                description: 'row(s) selected'
            },
            {
                event: 'deselect',
                description: 'row(s) deselected'
            },
            {
                beginMethod: 'refresh',
                endEvent: 'load',
                description: 'grid refreshed'
            }
        ],

        statics: {
            DEFAULT_PAGE_SIZE: 25
        },

        config: {
            /**
             * @cfg {Boolean}
             * Enables drag drop of rows, persists the rank,
             * Uses the {#link Rally.ui.grid.plugin.DragDrop} plugin
             */
            enableRanking: false,

            /**
             * @cfg {Boolean}
             * Causes the grid to sort by rank if no other sorter has been provided
             */
            defaultSortToRank: false,

            /**
             * @cfg
             * True to make the grid listen for global object update messages
             */
            listenForObjectUpdates: true,

            /**
             * @cfg {Boolean}
             * Enables inline editing of cells,
             * Uses the {@link Rally.ui.grid.plugin.CellEditing} plugin
             */
            enableEditing: true,

            /**
             * @cfg {Object}
             * Additional config to pass to the editing plugin, depends on the {@link #enableEditing} flag to be set to true
             */
            editingConfig: {
                publishMessages: true
            },

            /**
             * @cfg {Boolean}
             * Enables visual indicators for invalid cells when enableEditing is also true
             * Uses the {@link Rally.ui.grid.plugin.Validation} plugin
             */
            enableValidationUi: true,

            /**
             * @cfg {Boolean}
             * Enables bulk edit
             */
            enableBulkEdit: false,

            /**
             * @cfg {Object}
             * Configuration options for the bulk edit menu.
             * These properties will be passed to the {Rally.ui.menu.bulk.RecordMenu} on creation
             */
            bulkEditConfig: {},

            /**
             * @cfg {Boolean}
             * Enables the behavior for the blocked reason plugin
             */
            enableBlockedReasonPopover: true,

            /**
             * @cfg {Boolean}
             * Enables a one-click to change the schedule state
             */
            enableScheduleStateClickable: true,

            /**
             * @cfg {Boolean}
             * Automatically add all fields from the Model into the columns list
             * Note this only is compatible with an instance of {@link Rally.data.wsapi.Model}
             */
            autoAddAllModelFieldsAsColumns: false,

            /**
             * @cfg {Boolean}
             * Shows the row actions column (gear menu)
             */
            showRowActionsColumn: true,

            /**
             * @cfg {Array}
             * Accepts {[]} {@link Ext.grid.Panel} column configs, or a string to use the default renderer for the type
             */
            columnCfgs: [],
            /**
             * @cfg {Boolean}
             * Show paging toolbar on bottom of grid
             */
            showPagingToolbar: true,

            /**
             * @cfg {Object}
             * Additional config to pass to the paging toolbar, Depends on the {@link #showPagingToolbar} flag to be set to true
             */
            pagingToolbarCfg: {},

            /**
             * @cfg {Object} storeConfig
             * Use these parameters to create a store if not provided. Can be overridden, e.g, to add filter params to the store
             */
            storeConfig: {
                pageSize: 25,
                remoteFilter: true,
                remoteSort: true
            },

            disableColumnMenus: true,

            selType: 'rallyrowmodel',

            viewConfig: {
                plugins: []
            },

            /**
             * @cfg {Rally.app.Context}
             * Current application context object (user, workspace, project, scoping, etc.)
             */
            context: undefined,

            /**
             * @cfg {Function} onBeforeRecordMenuEdit
             * Function to execute before editing a record from the gear menu. Return false to not perform the action.
             * @param {Rally.data.Model} record The record that is being acted on.
             */
            onBeforeRecordMenuEdit: Ext.emptyFn,

            /**
             * @cfg {Function} onBeforeRecordMenuCopy
             * Function to execute before copying a record from the gear menu. Return false to not perform the action.
             * @param {Rally.data.Model} record The record that is being acted on.
             */
            onBeforeRecordMenuCopy: Ext.emptyFn,

            /**
             * @cfg {Function} onRecordMenuCopy
             * Function to execute after copying a record from the gear menu.
             * @param {Rally.data.Model} record The record that is being acted on.
             */
            onRecordMenuCopy: Ext.emptyFn,

            /**
             * @cfg {Function} onBeforeRecordMenuDelete
             * Function to execute before deleting a record from the gear menu. Return false to not perform the action.
             * @param {Rally.data.Model} record The record that is being acted on.
             */
            onBeforeRecordMenuDelete: Ext.emptyFn,

            /**
             * @cfg {Function} onRecordMenuDelete
             * Function to execute after deleting a record from the gear menu.
             * @param {Rally.data.Model} record The record that is being acted on.
             */
            onRecordMenuDelete: Ext.emptyFn,

            /**
             * @cfg {Function} onBeforeRecordMenuRankHighest
             * Function to execute before ranking a record highest from the gear menu. Return false to not perform the action.
             * @param {Rally.data.Model} record The record that is being acted on.
             */
            onBeforeRecordMenuRankHighest: Ext.emptyFn,

            /**
             * @cfg {Function} onBeforeRecordMenuRankLowest
             * Function to execute before ranking a record highest from the gear menu. Return false to not perform the action.
             * @param {Rally.data.Model} record The record that is being acted on.
             */
            onBeforeRecordMenuRankLowest: Ext.emptyFn,

            /**
             * @cfg {Function} onRecordMenuRemove
             * Function to execute after removing a record from the gear menu.
             * @param {Rally.data.Model} record The record that is being acted on.
             */
            onRecordMenuRemove: Ext.emptyFn
        },

        border: 0,
        bodyBorder: 0,

        viewType: 'rallygridview',
        plugins: [],

        stateful: false,

        constructor: function(config) {
            this.mergeConfig(config);
            this.dockedItems = [];

            if (this.stateful && !this.stateId) {
                this.stateId =  this.getAppContextOrEnvironmentContext().getScopedStateId('grid');
            }

            this.plugins = this._setupPlugins(config);

            this.callParent(arguments);
        },

        initComponent: function() {
            this.initState();

            this.addEvents(
                /**
                 * @event
                 * Fires when the grid's datastore has loaded.
                 * @param {Rally.ui.grid.Grid} this
                 */
                'load',
                /**
                 * @event
                 * Fires whenever a successful write has been made via the configured store.
                 * @param {Ext.data.Store} store The store that was written to.
                 * @param {Ext.data.Operation} operation The {@link Ext.data.Operation Operation} object that was used in
                 */
                'write',
                /**
                 * @event
                 * Fires before a record is destroyed
                 * @param {Rally.ui.grid.Grid} this
                 * @param {Rally.data.Model} record The record to be destroyed
                 */
                'beforerecorddestroy',
                /**
                 * @event
                 * Fires when a delete request completed
                 * @param {Rally.ui.grid.Grid} this
                 * @param {Rally.data.Model[]} records The records array from Ext.data.Operation#callback
                 * @param {Ext.data.Operation} operation See Ext.data.Operation#callback
                 */
                'deleterequestcompleted',
                /**
                 * @event
                 * Fires when the grid was not able to load its data
                 * @param {Rally.ui.grid.Grid} this
                 * @param {Ext.data.Operation} operation The operation associated with the load
                 */
                'dataloadexception',
                /**
                 * @event filterchange
                 * Fires when the grid's filter is changed.
                 * @param {Ext.util.Filter} filter
                 * @param Boolean clearFilter - true if existing filters should be cleared before applying new filter
                 * @param {Boolean} ignoreDefaultFilters True if filters passed in at initialization time should be removed when clearing other filters
                 */
                'filterchange',
                /**
                 * @event columnshow
                 * Fires when a column is shown.
                 * @inheritdoc Ext.grid.header.Container#columnshow
                 */
                'columnshow',
                'fieldsupdated'
            );

            if (this.showPagingToolbar) {
                this.dockedItems.push(Ext.apply({
                    itemId: 'pagingToolbar',
                    xtype: 'rallypagingtoolbar',
                    dock: 'bottom'
                }, this.pagingToolbarCfg));
            }

            if (this.enableBulkEdit) {
                this.selType = 'rallycheckboxmodel';
                this.selModel = {
                    injectCheckbox: this.enableRanking ? 1 : 0
                };
            }

            if (this.store) {
                if (_.isFunction(this.store.model)) {
                    this._configureWithStore(this.store);
                } else {
                    this.columns = [];
                    this.store.hydrateModel().then({
                        success: function() {
                            this._onStoreBuilt(this.store);
                        },
                        scope: this
                    });
                }
            } else {
                this.columns = [];
                this._buildStoreAndConfigureColumns();
            }

            this.on('sortchange', this._persistSorterForStoreRebuild, this);

            this.on('afterrender', this._onAfterRender, this, {single: true});

            this.callParent(arguments);
        },

        getState: function() {
            var state = {},
                statefulColumns = _.filter(this.columns, this._isStatefulColumn);

            state.columns = _.map(statefulColumns, function(column) {
                var initialConfig = column.initialConfig;
                return {
                    xtype: initialConfig.xtype,
                    dataIndex: initialConfig.dataIndex,
                    text: initialConfig.text,
                    sortable: initialConfig.sortable,
                    flex: column.getSizeModel().width === Ext.layout.SizeModel.configured ? null : initialConfig.flex,
                    width: column.getWidth()
                };
            }, this);

            state.sorters = _.map(this.getStore().sorters.getRange(), function(sorter) {
                return {
                    property: sorter.property,
                    direction: sorter.direction
                };
            });

            return state;
        },

        applyState: function(state) {
            if (state) {
                if (state.columns) {
                    this.columnCfgs = state.columns;
                }

                if (state.sorters) {
                    this.storeConfig.sorters = _.map(state.sorters, function(sorterState) {
                        return Ext.create('Ext.util.Sorter', {
                            property: sorterState.property,
                            direction: sorterState.direction
                        });
                    });
                }
            }
        },

        /**
         * Returns the fetch set on this grid's store
         * @return {String[]}
         */
        getFetch: function() {
            return (this.store && this.store.fetch) || [];
        },

        /**
         * Refresh the data in the grid.
         */
        refresh: function(options) {
            return this.getStore().load(options);
        },

        refreshAfterBulkAction: function() {
            return this.refresh();
        },

        /**
         * @private
         *
         * Reconfigures the table with a new store/columns, Either the store or the columns can be omitted if you don't wish to change them
         * @param {Rally.data.wsapi.Model}
         * @param {Array}
         */
        reconfigure: function(newStore, columns) {
            this.callParent(arguments);
            this._setupStoreHandlers();
            var pagingToolbar = this.down('#pagingToolbar');
            if (pagingToolbar) {
                pagingToolbar.bindStore(newStore);
            }
            if(Ext.isDefined(columns)) {
                this.columns = columns;
            }
        },

        /**
         * Reload the store using a new model.
         * @param {Rally.data.wsapi.Model|Rally.data.wsapi.Model[]} model The model to recreate the grid with
         */
        reconfigureWithModel: function(model) {
            this._saveFilters(this.store);
            this.store = null;
            this.model = model;
            this._buildStoreAndConfigureColumns();
            this._applyFilters(this.getStore());
        },

        /**
         * Reconfigure the columns to be displayed in the grid.
         * @param {[]} Set {@link Rally.ui.grid.Grid.columnCfgs}
         */
        reconfigureWithColumns: function(columnCfgs) {
            this.columnCfgs = columnCfgs;
            this.reconfigureWithModel(this.model);
        },

        /**
         * Creates column objects.
         * @private
         * @param {Rally.data.wsapi.Model[]} models The models to recreate the grid with
         * @return {Object[]} column object configs
         */
        buildColumns: function(models) {
            var disabledEditorColumns = this.enableBlockedReasonPopover ? ['Blocked', 'DisplayColor'] : ['DisplayColor'];

            return Ext.create('Rally.ui.grid.ColumnBuilder').
                withEditingEnabled(this.enableEditing).
                withRankingEnabled(this.enableRanking).
                withDefaultColumns(this.columnCfgs).
                withSortableColumns(this.sortableColumns).
                shouldAutoAddAllModelFieldsAsColumns(this.autoAddAllModelFieldsAsColumns).
                shouldShowRowActionsColumn(this.showRowActionsColumn).
                withDisableColumnMenus(this.disableColumnMenus).
                withEditorsDisabledForColumns(disabledEditorColumns).
                build(models);
        },

        insertRecordIfShould: function(newRecord) {
            this.refresh();
        },

        updateExistingRecord: function(changedRecord, changedFields) {
            if (this._requiresRefresh(changedRecord, changedFields)) {
                this.refresh({clearOnLoad: true});
            } else {
                this.updateAssociatedRecords([changedRecord]);
            }
        },

        updateAssociatedRecords: function(existingRecords) {
            this.store.refreshRecords(existingRecords).then({
                success: function() {
                    _.each(existingRecords, this.highlightRowForRecord, this);
                    this.publish(Rally.Message.gridLoaded);
                },
                scope: this
            });
        },

        _requiresRefresh: function(changedObject, fieldNames) {
            return this._orderedFieldWasChanged(fieldNames) &&
                this._hasChangedObject(changedObject) &&
                changedObject._dragAndDropped !== true;
        },

        _orderedFieldWasChanged: function(fieldNames) {
            return _.any(this.store.sorters.getRange(), function(sorter) {
                return !_.isEmpty(sorter.property) && _.contains(fieldNames, sorter.property);
            });
        },

        _hasChangedObject: function(changedObject) {
            return this.store.getById(changedObject.getId()) !== null;
        },

        _isStatefulColumn: function(column) {
            return !Ext.isEmpty(column.dataIndex);
        },

        /**
         * @private
         * Add handlers for store events.
         * Base class does not use a setter for this.store,
         * so we need to make sure this function gets called
         * anytime this.store may have been changed.
         */
        _setupStoreHandlers: function() {
            var store = this.getStore();

            this.mon(store.getProxy(), 'exception', function(proxy, response, operation, options) {
                this.fireEvent('dataLoadException', this, operation, response);
            }, this);

            this.mon(store, 'write', this._onWriteRecordDelete, this);

            this.relayEvents(store, ['beforeload', 'load', 'write']);
        },

        /**
         * Returns all the fields that are needed to be fetched by the Grid
         * @returns {String[]} The fetch fields
         */
        getAllFetchFields: function() {
            return this.store.fetch;
        },

        getModels: function() {
            return [this.store.model];
        },

        realignEditor: function() {
            if (this.editingPlugin) {
                var editor = Ext.isFunction(this.editingPlugin.getActiveEditor) && this.editingPlugin.getActiveEditor();
                if (editor) {
                    editor.realign(true);
                }
            }
        },

        /**
         * Highlights the row representing the passed in record.
         * @param record
         */
        highlightRowForRecord: function(record) {
            var row = this.getView().getNode(this.store.find('ObjectID', record.get('ObjectID')));
            if (row) {
                Rally.util.Animation.highlight(Ext.fly(row).select('td'));
            }
        },

        getMoveToPositionStore: function(options) {
            var storeConfig = Ext.merge((options && options.storeConfig) || {}, {
                model: this.store.model,
                proxy: this.store.getProxy()
            });
            var positionStore = Ext.create(this.store.$className, storeConfig);

            return Deft.Promise.when(positionStore);
        },

        findRankedRecord: function(options) {
            return Rally.data.Ranker.loadExtremeRankedRecord(this.store, {
                last: !options.highest,
                metricsCmp: options.requester
            }).then(function(record) {
                if (record) {
                    Ext.callback(options.success, options.scope, [record]);
                }

                return record;
            });
        },

        shouldRecordBeRankable: function(record) {
            return this.store.indexOf(record) > -1 && this.store.getCount() > 1;
        },

        _buildFetch: function() {
            var fetch = ['ObjectID', 'Project', 'Workspace'],
                fetchConfig = this.storeConfig.fetch;

            if (!Ext.isEmpty(fetchConfig)) {
                if (Ext.isString(fetchConfig)) {
                    fetchConfig = fetchConfig.split(',');
                }

                fetch = fetch.concat(fetchConfig);
            }

            Ext.each(this.columns, function(column) {
                if (Ext.isString(column)) {
                    fetch.push(column);
                } else if (column.dataIndex) {
                    fetch.push(column.dataIndex);
                } else if (column.modelField) {
                    fetch.push(column.modelField.name);
                }

                var columnClass = column.self || Ext.ClassManager.getByAlias('widget.' + column.xtype);
                if (columnClass && Ext.isFunction(columnClass.getRequiredFetchFields)) {
                    fetch = fetch.concat(columnClass.getRequiredFetchFields(this));
                }
            }, this);

            return Rally.data.wsapi.FieldFetchMapper.getFetchFields(_.union(this.store.fetch || [], fetch));
        },

        _buildStoreAndConfigureColumns: function(config) {
            Ext.merge(this.config.storeConfig, this.storeConfig, config);

            var storeConfig = this._overrideAutoLoadOnStoreConfig(this.config.storeConfig);

            if(this.getContext() && !storeConfig.context) {
                storeConfig.context = this.getContext().getDataContext();
            }

            this.buildStore(storeConfig).then({
                success: this._onStoreBuilt,
                scope: this
            });
        },

        /*
         * @private
         * @param {Object} storeConfig The storeConfig object passed into the {@link Rally.ui.grid.Grid} config
         * We need to override the user's storeConfig.autoLoad because we have some wiring do to before the store can be loaded.
         * In the context of the grid the user's storeConfig.autoLoad is respected.
         */
        _overrideAutoLoadOnStoreConfig: function(storeConfig) {
            var storeConfigCopy = Ext.merge({}, storeConfig);
            storeConfigCopy.autoLoad = false;

            return storeConfigCopy;
        },

        /**
         * @private
         * {Object} Model object for the object to be deleted
         */
        _onWriteRecordDelete: function(store, operation, eOpts) {
            if (operation.action === 'destroy') {
                this.fireEvent('deleteRequestCompleted', this, operation.getRecords(), operation);

                //paging toolbar doesn't update correctly on remove, so we have to reload the data to make it update
                //partially the problem of the store, which doesn't update the total count after a delete
                this.refresh();
            }
        },

        _addDefaultSorterIfNeeded: function(store) {
            if(store.sorters.getCount() > 0) {
                return store;
            }

            var defaultSorterConfig;

            if(this.defaultSortToRank && Rally.data.Ranker.isRankable(store.model)) {
                var rankField = Rally.data.Ranker.getRankField(store.model);

                defaultSorterConfig = Rally.data.util.Sorter.sorters(rankField + ' ASC').pop();
            } else {
                defaultSorterConfig = Rally.data.util.Sorter.getDefaultSort(store.model.typePath, {
                    asSorter: true
                }).pop();
            }

            if(defaultSorterConfig) {
                store.sorters.add(Ext.create('Ext.util.Sorter', defaultSorterConfig));
            }
            return store;
        },

        _configureWithStore: function(store) {
            var columns = this.buildColumns(store.model);

            if (!this.rendered) {
                this.store = store;
                this.columns = columns;
                this._setStoreInPagerConfig(store);
                this._setupStoreHandlers();
            } else {
                this.reconfigure(store, columns);
            }
        },

        _onStoreBuilt: function(store) {
            if (this.view) {
                var emptyText = this.getView().emptyText;
                this.getView().emptyText = '';

                store.on('beforeload', function() {
                    // bindStore can trigger a refresh before the store is loaded, which will display the emptyText
                    // we hack around this by setting emptyText to empty string, then resetting correct emptyText before store load.
                    this.getView().emptyText = emptyText;
                }, this, {single: true});
            }

            this._addDefaultSorterIfNeeded(store);
            this._configureWithStore(store);
            this._applyFilters(store);

            store.fetch = this._buildFetch();
            if (!this.storeConfig.hasOwnProperty('autoLoad') || this.storeConfig.autoLoad) {
                Ext.defer(store.load, 10, store, [ typeof this.storeConfig.autoLoad === 'object' ? this.storeConfig.autoLoad : undefined ]);
            }

            this.storeConfig.autoLoad = true; // set to true to auto reload when #reconfigure is called.
        },

        _setStoreInPagerConfig: function(store) {
            if (this.dockedItems) {
                var dockedItems = this.dockedItems.isMixedCollection ? this.dockedItems.getRange() : this.dockedItems;

                var pagerConfig = _.find(dockedItems, {itemId: 'pagingToolbar'});
                if (pagerConfig) {
                    pagerConfig.store = store;
                }
            }
        },

        _applyFilters: function(store) {
            if (this.filterCollection) {
                var newStoreFilters = Ext.create('Ext.util.MixedCollection');
                newStoreFilters.addAll(this.filterCollection.toArray());
                store.filters = newStoreFilters;
            }
        },

        _saveFilters: function(store) {
            if (this.filterCollection) {
                //filterCollection won't be cleared out, so no need to do anything
                return;
            } else {
                if (store.filters && store.filters.getCount() > 0) {
                    this.filterCollection = Ext.create('Rally.data.filter.FilterCollection');
                    _.each(store.filters.getRange(), function(f){
                        f.itemId = f.toString();
                    });
                    this.filterCollection.addPermanentFilter(store.filters.getRange());
                }
            }
        },

        _persistSorterForStoreRebuild: function() {
            this.storeConfig.sorters = this.getStore().sorters.getRange();
        },

        _setupPlugins: function(config) {
            var plugins = config.plugins || [];

            if(this.listenForObjectUpdates) {
                plugins.push({ptype: 'rallyobjectupdatelistener'});
            }

            plugins.push({ptype: 'rallycolorpickerplugin'});

            if (this.enableEditing) {
                plugins.push(Ext.apply({
                    ptype: 'rallycellediting',
                    messageBus: this._getMessageBus()
                }, config.editingConfig));

                if (this.enableValidationUi) {
                    plugins.push({ptype: 'rallygridvalidation'});
                    plugins.push({ptype: 'rallycellvalidationui'});
                }
            }

            if (this.enableBlockedReasonPopover) {
                plugins.push({ptype: 'rallyblockedreasonpopoverplugin'});
            }

            plugins.push({ptype: 'rallyclickhandlerplugin'});

            if (this.enableRanking) {
                config.viewConfig = config.viewConfig || {};
                config.viewConfig.plugins = config.viewConfig.plugins || [];
                config.viewConfig.plugins.push({ptype: 'rallydragdrop'});
            }

            return _.uniq(plugins, 'ptype');
        },

        _onAfterRender: function() {
            this.relayEvents(this.headerCt, ['columnshow']);
        }
    });

})();
    Ext.define('Rally.technicalservices.dialog.SetDateDialog', {
        extend: 'Rally.ui.dialog.Dialog',
        alias: 'widget.tssetdatedialog',

        autoShow: true,
        cls: 'bulk-edit-dialog',
        closable: true,
        draggable: true,
        title: 'Set Planned Date',
        width: 375,

        config: {
            /**
             * @cfg {[Rally.data.Model]} records (required)
             * The records to bulk edit
             */
            records: null
        },

        initComponent: function() {
            this.callParent(arguments);

            this.addEvents(
                /**
                 * @param Rally.ui.dialog.BulkEditDialog the dialog
                 * @param Rally.data.wsapi.Field field the field being edited
                 * @param {String|Number} the new value
                 */
                'edit'
            );

            this.add(
                {
                    xtype: 'component',
                    cls: 'directions rui-info-label',
                    renderTpl: Ext.create('Ext.XTemplate',
                        'For the <tpl><b>{[values.recordCount]}</b></tpl> checked ',
                        '<tpl if="recordCount === 1">item<tpl else>items</tpl> apply the following dates:'
                    ),
                    renderData: {
                        recordCount: this.records.length
                    }
                },
                {
                    xtype: 'container',
                    itemId: 'form-container',
                    cls: 'form-container',
                    items: [
                        {
                            xtype: 'rallydatefield',
                            autoExpand: true,
                            itemId: 'dateField',
                            defaultSelectionPosition: null,
                            emptyText: 'Select date...',
                            listeners: {
                                select: function(cmp) {
                                    this.down('#applyButton').setDisabled(false);
                                },
                                scope: this
                            }
                        }
                    ]
                }
            );

            this.addDocked({
                xtype: 'toolbar',
                dock: 'bottom',
                padding: '0 0 10 0',
                layout: {
                    type: 'hbox',
                    pack: 'center'
                },
                ui: 'footer',
                items: [
                    {
                        xtype: 'rallybutton',
                        itemId: 'applyButton',
                        text: 'Apply',
                        cls: 'primary rly-small',
                        disabled: true,
                        handler:  this._onApplyClicked,
                        scope: this
                    },
                    {
                        xtype: 'rallybutton',
                        text: 'Cancel',
                        cls: 'secondary rly-small',
                        handler: function() {
                            this.close();
                        },
                        scope: this
                    }
                ]
            });
        },

        afterRender: function() {
            this.callParent(arguments);
            this.down('#dateField').focus(false, 150);
        },

        _onApplyClicked: function() {
            var val = Rally.util.DateTime.toIsoString(this.down('#dateField').getValue());
            var args = {
                field: this.dateField,
                displayName: this.dateField.displayName,
                value: val
            };
            this.fireEvent('edit', this, args);
            this.close();
        }
    });

Ext.define('Rally.technicalservices.settings.StateFieldMapping',{
    extend: 'Ext.form.field.Base',
    alias: 'widget.tsstatefieldmappingsettings',
    config: {
        value: undefined,
        states: undefined,
        model: undefined,
        decodedValue: {}
    },
    fieldSubTpl: '<div id="{id}" class="settings-grid"></div>',

    width: 400,
    cls: 'column-settings',

    onDestroy: function() {
        if (this._grid) {
            this._grid.destroy();
            delete this._grid;
        }
        this.callParent(arguments);
    },

    onRender: function() {
        var decodedValue = {};
        if (this.value && !_.isEmpty(this.value)){
            decodedValue = Ext.JSON.decode(this.value);
        }
        this.callParent(arguments);

        var data = [];

        _.each(this.states, function(s){
            var field = null,
                stateName = s.get('StringValue');

            if (stateName && stateName.length > 0){
                if (decodedValue[stateName]){
                    field = decodedValue[stateName];
                }
                data.push({state: stateName, field: field});
            }
        }, this);

        this._store = Ext.create('Ext.data.Store', {
            fields: ['state', 'field'],
            data: data
        });

        this._grid = Ext.create('Rally.ui.grid.Grid', {
            autoWidth: true,
            renderTo: this.inputEl,
            columnCfgs: this._getColumnCfgs(),
            showPagingToolbar: false,
            showRowActionsColumn: false,
            store: this._store,
            width: this.getWidth() * 0.90,
            editingConfig: {
                publishMessages: false
            }
        });
        this.fireEvent('ready');
    },
    _getColumnCfgs: function() {
         var columns = [
            {
                text: 'State',
                dataIndex: 'state',
                flex: 1
            },
            {
                text: 'Transition Date Field',
                dataIndex: 'field',
                flex: 1,
                editor: {
                    xtype: 'tshiddendatefieldcombobox',
                    model: this.model
                }
            }];
        return columns;
    },
    /**
     * When a form asks for the data this field represents,
     * give it the name of this field and the ref of the selected project (or an empty string).
     * Used when persisting the value of this field.
     * @return {Object}
     */
    getSubmitData: function() {
        var data = {};
        data[this.name] = Ext.JSON.encode(this._buildSettingValue());
        return data;
    },
    _buildSettingValue: function() {
        var mappings = {};
        this._store.each(function(record) {
            if (record.get('state') && record.get('field')) {
                mappings[record.get('state')] = record.get('field');
            }
        }, this);
        return mappings;
    },

    getErrors: function() {
        var errors = [];
        //todo validate they aren't using the same field for multiple states
        return errors;
    },
    validate : function() {
        var me = this,
            isValid = me.isValid();
        if (isValid !== me.wasValid) {
            me.wasValid = isValid;
            me.fireEvent('validitychange', me, isValid);
        }
        if (!isValid){
            var html = this.getErrors().join('<br/>');
            Ext.create('Rally.ui.tooltip.ToolTip', {
                target : this.getEl(),
                html: '<div class="tsinvalid">' + html + '</div>',
                autoShow: true,
                anchor: 'bottom',
                destroyAfterHide: true
            });

        }

        return isValid;
    },
    setValue: function(value) {
        this.callParent(arguments);
        this._value = value;
    }
});
Ext.define('Rally.technicalservices.Settings',{
    singleton: true,

    getFields: function(modelName, states){
        var labelWidth = 150;

        return [{
            xtype: 'tshiddendatefieldcombobox',
            name: 'hiddenStartDateField',
            model: modelName,
            labelWidth: labelWidth,
            labelAlign: 'right',
            fieldLabel: 'Set Start Date Field',
            readyEvent: 'ready'
        },{
            xtype: 'tsstatefieldmappingsettings',
            states: states,
            model: modelName,
            name: 'stateDateFields',
            readyEvent: 'ready',
            fieldLabel: 'State Transition Date Field Mapping',
            margin: 15,
            labelAlign: 'top'
        }];
    }
});

            
               Rally.launchApp('feature-hidden-field-updater', {
                   name: 'Feature Hidden Field Updater'
               });
        });
    </script>
    
    <style type="text/css">

.app {
}
.tsinfolink {
    position:absolute;
    right:0px;
    width: 14px;
    height: 14px;
    border-radius: 7px;
    text-align: center;
    color: white;
    background: #C0C0C0;
    border-style: solid;
    border-width: 1px;
    margin-top: 25px;
    margin-right: 5px;
    cursor: pointer;
}
    </style>

</head>
<body></body>
</html>